# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.  
name: Build and Deploy to GKE


on:
  push:
    branches:
      - main


env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: trial-cluster    # Add your cluster name here.
  GKE_ZONE: europe-west2  # Add your cluster zone here.
  DEPLOYMENT_NAME: python-app # Add your deployment name here.
  IMAGE: python-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to GCP'
      uses: 'google-github-actions/auth@v1'
      with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/1044325156148/locations/global/workloadIdentityPools/trial-gke/providers/github-oidc-srikaruna'
          service_account: 'service-trial1@hidden-phalanx-375513.iam.gserviceaccount.com'
          
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
 
    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud config set project $PROJECT_ID
        gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
        
    - run: |-
        gcloud --quiet auth configure-docker    
        
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ${{ github.workspace }}/.github/manifest/deployment.yaml
        kubectl apply -f ${{ github.workspace }}/.github/manifest/deployment.yaml

    - name: Install cosign
      uses: sigstore/cosign-installer@v1.4.1
      with:
          cosign-release: 'v1.4.1'

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Log into ghcr.io
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

    - name: Build the helm chart and sign the oci image
      run: task
      env:
         CR_PAT: ${{ secrets.CR_PAT }}
         OWNER: ${{ github.repository_owner }}

    - name: 'Deploy-helm'
      # Parameters are pulled directly from the GitHub deployment event so the
      # configuration for the job here is very minimal.
      uses: 'srikantharun/help-with-helm@master'
      with:
        release: 'nginx-dev'
        track: canary
        namespace: 'default'
        token: '${{ github.token }}'
        secrets: '${{ toJSON(secrets) }}'
        version: '${{ github.sha }}'
        chart: 'app'
        helm: helm3
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
